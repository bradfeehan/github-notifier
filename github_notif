#!/bin/bash

readonly JQ=jq
readonly DIR_NAME=$(dirname $BASH_SOURCE)
readonly LATEST_SHOWN_FILE="$HOME/.latest_shown"
KEEP_IN_SCREEN_TIME_IN_SECONDS=5
PATH=$PATH:/usr/local/bin

. $DIR_NAME/lib/config_accessor.sh
. $DIR_NAME/lib/logger.sh
. $DIR_NAME/lib/url.sh
. $DIR_NAME/lib/notifier.sh

function show_notification () {
  local access_token=$1
  local notifications_json=$2
  local notification_index=$3

  eval "$(echo "$notifications_json" | $JQ ".[$notification_index]" |
  $JQ -r '@sh "
  latest_comment_url=\(.subject.latest_comment_url)
  repo=\(.repository.name)
  title=\(.subject.title)
  general_url=\(.subject.url)
  notification_type=\(.subject.type)
  "')"

  notification_type=$(echo $notification_type | sed 's|PullRequest|a PR|;s|Issue|an issue|;s|Commit|a commit|')

  # sometimes latest_comment_url="null", for example when PR title is set
  [[ $latest_comment_url == "null" ]] && notification_details_url="$general_url" || notification_details_url="$latest_comment_url"

  local notification_details_json
  notification_details_json=$(do_github_remote_call $notification_details_url $access_token)
  local call_result=$?
  if [[ $call_result -ne 0 ]]; then
    echo $notification_details_json
    return 1
  fi

  eval "$(echo "$notification_details_json" | $JQ -r '@sh "
  details_user=\(.user.login)
  details_body=\(.body)
  details_html_url=\(.html_url)
  details_updated=\(.updated_at)
  details_title=\(.title)
  "')"

  echo "$notification_details_url" | grep -q 'comments'
  local call_result=$?
  if [[ $call_result -eq 0 ]]; then
    event_action='commented on'
  else
    event_action='created'
  fi

  #TODO: my be no description provided instead
  [[ $details_body != "" ]] && body="$details_body" || body="$details_title"

  show_notification_window "${details_user//\"} ${event_action} $notification_type in ${repo//\"}" "${title//\"}" "${body//\"}" ${details_html_url//\"} $DIR_NAME/logo.png
}

function show_all_notifications () {
  config_url=$1
  show_notification_window "More missed notifications on $(get_resource_name $config_url)" "See all" $config_url/notifications $DIR_NAME/logo.png
}

function get_last_shown_commit_date() {
  local config_name=$1

  if [ -f $LATEST_SHOWN_FILE ]; then
    echo $(cat $LATEST_SHOWN_FILE | grep -w "$config_name" | cut -d' ' -f2)
  else
    echo "0"
  fi
}

function save_last_shown_commit_date() {
  local config_name=$1
  local value=$2
  if [ -f $LATEST_SHOWN_FILE ]; then
    local line_number=$(grep -wn "$config_name" $LATEST_SHOWN_FILE | cut -d: -f1)
    if [[ -n "$line_number" ]]; then
      sed -i .bak "${line_number}s|.*|$config_name $value|" $LATEST_SHOWN_FILE &&
      rm $LATEST_SHOWN_FILE.bak
    else
      echo $config_name $value >> $LATEST_SHOWN_FILE
    fi
  else
    echo $config_name $value >> $LATEST_SHOWN_FILE
  fi
}

function do_github_remote_call() {
  local url=$1
  local access_token=$2
  local response
  response=$(curl -w "%{http_code}" $url -H "Authorization: token $access_token" 2>/dev/null)
  local call_result=$?
  if [[ $call_result -ne 0 ]]; then
    echo "Failed to connect to $url"
    return 1
  fi

  local response_status_code=$(echo "$response" | tail -n 1)
  local response_body=$(echo "$response" | sed \$d)
  if [[ $response_status_code != 200 ]]; then
    local error_message=$(echo "$response_body" | $JQ -r .message )
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      echo "An error occured while accessing $url. The output of notifications is not of known format"
      return 1
    fi
    if [[ "$error_message" != "null" ]]; then
      echo "An error occured while accessing $url: $error_message"
      return 1
    fi
  fi
  echo $response_body
  return 0
}

# current implementation have limit of 2
function show_missed_notifications() {
  local config_url=$1
  local access_token=$2
  local notifications_json=$3
  local shown_date=$4

  local latest_commit_dates=( $(echo "$notifications_json" | $JQ '.[0,1,2].updated_at' | \
  egrep '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z' | xargs -n 1 date -u -j -f "%Y-%m-%dT%TZ" +"%s") )

  if (( $shown_date < ${latest_commit_dates[0]:--1} )); then
    error_message=$(show_notification $access_token "$notifications_json" 0)
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error "An error occured while showing notification. $error_message"
      exit_code=1
    else
      sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
    fi
  else
    echo $shown_date
    return $exit_code
  fi

  if (( $shown_date < ${latest_commit_dates[1]:--1} )); then
    error_message=$(show_notification $access_token "$notifications_json" 1)
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error "An error occured while showing notification. $error_message"
      exit_code=1
    else
      sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
    fi
  else
    echo ${latest_commit_dates[0]}
    return $exit_code
  fi

  if (( $shown_date < ${latest_commit_dates[2]:--1} )); then
    show_all_notifications $config_url
    sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
  fi

  echo ${latest_commit_dates[0]}
  return $exit_code
}

function main() {
  exit_code=0
  local active_configs=$(get_active_configs)
  if [ -z "$active_configs" ]; then
     echo "There is no any active configuration to get notifications"
     return 1
  fi

  for config_name in $active_configs ; do
    local last_shown_commit_date=$(get_last_shown_commit_date $config_name)
    local notifications_json
    access_token=$(get_token $config_name)
    local notifications_api_url="${config_name/https:\/\//https://api.}"/notifications
    notifications_json=$(do_github_remote_call $notifications_api_url $access_token)
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error $notifications_json
      exit_code=1
      continue
    fi

    local updated_last_shown_commit_date
    updated_last_shown_commit_date=$(show_missed_notifications $config_name $access_token "$notifications_json" $last_shown_commit_date)
    local call_result=$?
    save_last_shown_commit_date $config_name $updated_last_shown_commit_date
    if [[ $call_result -ne 0 ]]; then
      log_error "Cannot save last shown commit date"
      exit_code=1
    fi
  done

  return $exit_code
}

main
