#!/bin/bash

readonly DIR_NAME=$(dirname "$BASH_SOURCE")
readonly MAX_NUMBER_OF_MISSED_NOTIFICATIONS_TO_SHOW=2
readonly INSTANT_OF_THE_BIG_BANG=-1
readonly NOTIFY_ABOUT_FAILED_NOTIFICATIONS=1
KEEP_IN_SCREEN_TIME_IN_SECONDS=5
PATH=$PATH:/usr/local/bin

. "$DIR_NAME/lib/config_accessor.sh"
. "$DIR_NAME/lib/logger.sh"
. "$DIR_NAME/lib/url.sh"
. "$DIR_NAME/lib/notifier.sh"
. "$DIR_NAME/lib/remote_gateway.sh"
. "$DIR_NAME/lib/last_shown_info.sh"

function show_notification () {
  local access_token=$1
  local notifications_json=$2
  local notification_index=$3

  eval "$(echo "$notifications_json" | jq ".[$notification_index]" |
  jq -r '@sh "
  latest_comment_url=\(.subject.latest_comment_url)
  repo=\(.repository.name)
  title=\(.subject.title)
  general_url=\(.subject.url)
  notification_type=\(.subject.type)
  updated_at=\(.updated_at)
  "')"

  local call_result=$?
  if [[ $call_result -ne 0 ]]; then
    log_error "Failed to parse notifications list"
    return 1
  fi

  notification_type=$(echo "$notification_type" | sed 's|PullRequest|a PR|;s|Issue|an issue|;s|Commit|a commit|')

  # sometimes latest_comment_url="null", for example when PR title is set
  [[ "$latest_comment_url" == "null" ]] && notification_details_url="$general_url" || notification_details_url="$latest_comment_url"

  local notification_details_json
  notification_details_json=$(do_github_remote_call "$notification_details_url" "$access_token")
  local call_result=$?
  if [[ $call_result -ne 0 ]]; then
    echo "$notification_details_json"
    return 1
  fi

  eval "$(echo "$notification_details_json" | jq -r '@sh "
  details_user=\(.user.login)
  details_user_avatar_url=\(.user.avatar_url)
  details_body=\(.body)
  details_html_url=\(.html_url)
  details_updated=\(.updated_at)
  details_title=\(.title)
  details_created_at=\(.created_at)
  details_updated_at=\(.updated_at)
  details_closed_at=\(.closed_at)
  details_merged_at=\(.merged_at)
  details_closed_by=\(.closed_by.login)
  details_closed_by_avatar_url=\(.closed_by.avatar_url)
  details_merged_by=\(.merged_by.login)
  details_merged_by_avatar_url=\(.merged_by.avatar_url)
  "')"

  local user=$details_user
  local avatar_url=$DIR_NAME/logo.png
  [[ "$details_user_avatar_url" != "null" ]] && avatar_url=$details_user_avatar_url

  echo "$notification_details_url" | grep -q 'comments'
  local call_result=$?
  if [[ $call_result -eq 0 ]]; then
    event_action='commented on'
  else
    if [[ "$details_closed_by" != "null" && $(( $(date_to_epoch "$updated_at") - $(date_to_epoch "$details_closed_at") )) -lt 5 ]]; then
      event_action="closed"
      user=$details_closed_by
      avatar_url=$details_closed_by_avatar_url
    elif [[ "$details_merged_by" != "null" && $(( $(date_to_epoch "$updated_at") - $(date_to_epoch "$details_merged_at") )) -lt 5 ]]; then
      event_action="merged"
      user=$details_merged_by
      avatar_url=$details_merged_by_avatar_url
    elif [[ $(( $(date_to_epoch "$updated_at") - $(date_to_epoch "$details_created_at") )) -lt 5 ]]; then
      event_action="created"
    elif [[ $(( $(date_to_epoch "$updated_at") - $(date_to_epoch "$details_updated_at") )) -lt 5 ]]; then
      event_action="updated" #TODO: distuinguish committed /pull/<id>/[commits,comments]
    else
      event_action='contributed on'
    fi
  fi

  #TODO: may be no description provided instead
  [[ $details_body != "" ]] && body="$details_body" || body="$details_title"

  show_notification_window "${user//\"} ${event_action} $notification_type in ${repo//\"}" "${title//\"}" "${body//\"}" "${details_html_url//\"}" "${avatar_url}"
}

function date_to_epoch() {
  local input_date=$1
  if [[ $(echo "$input_date" | egrep '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z') == "" ]]; then
    echo "0"
  else
    echo $(date -u -j -f "%Y-%m-%dT%TZ" +"%s" "$input_date")
  fi
}

function show_all_notifications () {
  config_url=$1
  show_notification_window "More missed notifications on $(get_resource_name "$config_url")" "See all" "" "$config_url/notifications"
}

function show_notification_about_failure () {
  config_url=$1
  error_message=$2
  show_notification_window "Failed to fetch a notification" "$error_message" "$config_url/notifications"
}

function show_missed_notifications() {
  local config_url=$1
  local access_token=$2
  local notifications_json=$3
  local shown_date=$4

  local latest_commit_dates=( $(echo "$notifications_json" | jq '.[0,1,2].updated_at' | \
  egrep '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z' | xargs -n 1 date -u -j -f "%Y-%m-%dT%TZ" +"%s") )

  for ((i = 0; i < $MAX_NUMBER_OF_MISSED_NOTIFICATIONS_TO_SHOW; i++)); do
    if (( $shown_date < ${latest_commit_dates[$i]:-INSTANT_OF_THE_BIG_BANG} )); then
      error_message=$(show_notification "$access_token" "$notifications_json" $i)
      local call_result=$?
      if [[ $call_result -ne 0 ]]; then
        log_error "An error occured while showing notification. $error_message"
        if (( $NOTIFY_ABOUT_FAILED_NOTIFICATIONS == 1 )); then
          show_notification_about_failure "$config_url" "$error_message"
        fi;
      else
        sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
      fi
    else
      break;
    fi
  done

  if (( $shown_date < ${latest_commit_dates[2]:-INSTANT_OF_THE_BIG_BANG} )); then
    show_all_notifications "$config_url"
    sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
  fi

  (( $shown_date > ${latest_commit_dates[0]:-INSTANT_OF_THE_BIG_BANG} )) && echo "$shown_date" || echo "${latest_commit_dates[0]}"
  return $exit_code
}

function main() {
  exit_code=0
  local active_configs=$(get_active_configs)
  if [ -z "$active_configs" ]; then
     echo "There is no any active configuration to get notifications"
     return 1
  fi

  for config_name in $active_configs ; do
    local last_shown_commit_date=$(get_last_shown_commit_date "$config_name")
    local notifications_json
    access_token=$(get_token "$config_name")

    local notifications_api_url
    if [[ "$config_name" == "https://github.com" ]]; then
      notifications_api_url="${config_name/https:\/\//https://api.}"/notifications
    else
      notifications_api_url="${config_name}/api/v3/notifications"
    fi

    notifications_json=$(do_github_remote_call "$notifications_api_url" "$access_token")
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error "$notifications_json"
      exit_code=1
      continue
    fi

    local updated_last_shown_commit_date
    updated_last_shown_commit_date=$(show_missed_notifications "$config_name" "$access_token" "$notifications_json" "$last_shown_commit_date")
    if [[ "$updated_last_shown_commit_date" != "$last_shown_commit_date" ]]; then
      save_last_shown_commit_date "$config_name" "$updated_last_shown_commit_date"
      local call_result=$?
      if [[ $call_result -ne 0 ]]; then
        log_error "Cannot save last shown commit date. $updated_last_shown_commit_date"
        exit_code=1
      fi
    fi
  done

  return $exit_code
}

main
