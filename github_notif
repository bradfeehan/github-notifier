#!/bin/bash

readonly JQ=jq
readonly DIR_NAME=$(dirname $BASH_SOURCE)
APPLICATION_DIR=`dirname $0`
readonly LATEST_ID_FILE="$APPLICATION_DIR/.latest_id"
KEEP_IN_SCREEN_TIME_IN_SECONDS=5
CONFIG_FILE_DIR=$APPLICATION_DIR
PATH=$PATH:/usr/local/bin

. $DIR_NAME/lib/config_accessor.sh
. $DIR_NAME/lib/logger.sh
. $DIR_NAME/lib/url.sh

function show_notification () {
  local access_token=$1
  local notifications_json=$2
  local notification_index=$3
  local notification_info=$(echo "$notifications_json" | $JQ ".[$notification_index].subject.latest_comment_url,.[$notification_index].repository.name,.[$notification_index].subject.title,.[$notification_index].subject.url")
  local latest_comment_url=$(echo $notification_info | cut -d'"' -f2)
  local repo=$(echo $notification_info | cut -d'"' -f4)
  local title=$(echo $notification_info | cut -d'"' -f6)
  local general_url=$(echo $notification_info | cut -d'"' -f8)

  # sometimes latest_comment_url="null", for example when PR title is set
  [[ $latest_comment_url == "null" ]] && notification_details_url="$general_url" || notification_details_url="$latest_comment_url"

  local notification_details_json
  notification_details_json=$(do_github_remote_call $notification_details_url $access_token)
  local call_result=$?
  if [[ $call_result -ne 0 ]]; then
    echo $notification_details_json
    return 1
  fi

  local notification_details=$(echo "$notification_details_json" | $JQ '.user.login,.body,.html_url,.updated_at,.subject,.title')

  local details_user=$(echo "$notification_details" | sed -n '1p')
  local details_body=$(echo "$notification_details" | sed -n '2p' | sed 's|\\r||g;s|\\n||g;s|\\t||g;s|<!--\(.*\)-->||g')
  local details_html_url=$(echo "$notification_details" | sed -n '3p')
  local details_updated=$(echo "$notification_details" | sed -n '4p')
  local details_title=$(echo "$notification_details" | sed -n '5p')

  [[ $details_body != "" ]] && body="$details_body" || body="$details_title"

  #remove '[' and '<' characters from begining of the strings
  #because of https://github.com/julienXX/terminal-notifier/issues/134
  local details_body=$(echo $details_body | sed -E 's|^[\[\<]+||')
  local title=$(echo $title | sed -E 's|^[\[\<]+||')

  terminal-notifier --group 1 -title "${details_user//\"} on ${repo//\"}" -subtitle "${title//\"}" \
  -message "${body//\"}" -open ${details_html_url//\"} -appIcon $DIR_NAME/logo.png
}

function show_all_notifications () {
  config_url=$1
  terminal-notifier --group 1 -title "Missed notifications on $(get_resource_name $config_url)" \
  -subtitle "$(date)" -message "See all" -open $config_url/notifications -appIcon $DIR_NAME/logo.png
}

function get_last_shown_commit_id() {
  local config_name=$1

  if [ -f $LATEST_ID_FILE ]; then
    echo $(cat $LATEST_ID_FILE | grep -w "$config_name" | cut -d' ' -f2)
  else
    echo "0"
  fi
}

function save_last_shown_commit_id() {
  local config_name=$1
  local value=$2
  if [ -f $LATEST_ID_FILE ]; then
    local line_number=$(grep -wn "$config_name" $LATEST_ID_FILE | cut -d: -f1)
    if [[ -n "$line_number" ]]; then
      sed -i .bak "${line_number}s|.*|$config_name $value|" $LATEST_ID_FILE &&
      rm $LATEST_ID_FILE.bak
    else
      echo $config_name $value >> $LATEST_ID_FILE
    fi
  else
    echo $config_name $value >> $LATEST_ID_FILE
  fi
}

function do_github_remote_call() {
  local url=$1
  local access_token=$2
  local response
  response=$(curl -w "%{http_code}" $url -H "Authorization: token $access_token" 2>/dev/null)
  local call_result=$?
  if [[ $call_result -ne 0 ]]; then
    echo "Failed to connect to $url"
    return 1
  fi

  local response_status_code=$(echo "$response" | tail -n 1)
  local response_body=$(echo "$response" | sed \$d)
  if [[ $response_status_code != 200 ]]; then
    local error_message=$(echo "$response_body" | $JQ -r .message )
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      echo "An error occured while accessing $url. The output of notifications is not of known format"
      return 1
    fi
    if [[ "$error_message" != "null" ]]; then
      echo "An error occured while accessing $url: $error_message"
      return 1
    fi
  fi
  echo $response_body
  return 0
}

# current implementation have limit of 2
function show_missed_notifications() {
  local config_url=$1
  local access_token=$2
  local notifications_json=$3
  local shown_id=$4

  local latest_commit_ids=( $(echo "$notifications_json" | $JQ '.[0,1,2].id' | tr -d '"') )

  if [[ ${latest_commit_ids[0]} != null && $shown_id != ${latest_commit_ids[0]} ]]; then
    error_message=$(show_notification $access_token "$notifications_json" 0)
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error "An error occured while showing notification. $error_message"
      exit_code=1
    else
      sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
    fi
  else
    echo $shown_id
    return $exit_code
  fi

  if [[ ${latest_commit_ids[1]} != null && $shown_id != ${latest_commit_ids[1]} ]]; then
    error_message=$(show_notification $access_token "$notifications_json" 1)
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error "An error occured while showing notification. $error_message"
      exit_code=1
    else
      sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
    fi
  else
    echo ${latest_commit_ids[0]}
    return $exit_code
  fi

  if [[ ${latest_commit_ids[2]} != null && $shown_id != ${latest_commit_ids[2]} ]]; then
    show_all_notifications $config_url
    sleep $KEEP_IN_SCREEN_TIME_IN_SECONDS
  fi

  echo ${latest_commit_ids[0]}
  return $exit_code
}

function main() {
  exit_code=0
  local active_configs=$(get_active_configs)
  if [ -z "$active_configs" ]; then
     echo "There is no any active configuration to get notifications"
     return 1
  fi

  for config_name in $active_configs ; do
    local last_shown_commit_id=$(get_last_shown_commit_id $config_name)
    local notifications_json
    access_token=$(get_token $config_name)
    local notifications_api_url="${config_name/https:\/\//https://api.}"/notifications
    notifications_json=$(do_github_remote_call $notifications_api_url $access_token)
    local call_result=$?
    if [[ $call_result -ne 0 ]]; then
      log_error $notifications_json
      exit_code=1
      continue
    fi

    local updated_last_shown_commit_id
    updated_last_shown_commit_id=$(show_missed_notifications $config_name $access_token "$notifications_json" $last_shown_commit_id)
    local call_result=$?
    save_last_shown_commit_id $config_name $updated_last_shown_commit_id
    if [[ $call_result -eq 0 ]]; then
      exit_code=1
    fi
  done

  return $exit_code
}

main
